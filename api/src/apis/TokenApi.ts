// tslint:disable
/**
 * PAY.JP Token API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    Token,
    TokenFromJSON,
    TokenToJSON
} from "../models";

export interface CreateTokenRequest {
    cardNumber: string;
    cardExpMonth: string;
    cardExpYear: string;
    cardCvc?: string;
    cardName?: string;
}

export interface GetTokenByIdRequest {
    tokenId: string;
}

/**
 * no description
 */
export class TokenApi extends runtime.BaseAPI {
    /**
     * Create new token
     */
    async createTokenRaw(requestParameters: CreateTokenRequest): Promise<runtime.ApiResponse<Token>> {
        if (requestParameters.cardNumber === null || requestParameters.cardNumber === undefined) {
            throw new runtime.RequiredError(
                "cardNumber",
                "Required parameter requestParameters.cardNumber was null or undefined when calling createToken."
            );
        }

        if (requestParameters.cardExpMonth === null || requestParameters.cardExpMonth === undefined) {
            throw new runtime.RequiredError(
                "cardExpMonth",
                "Required parameter requestParameters.cardExpMonth was null or undefined when calling createToken."
            );
        }

        if (requestParameters.cardExpYear === null || requestParameters.cardExpYear === undefined) {
            throw new runtime.RequiredError(
                "cardExpYear",
                "Required parameter requestParameters.cardExpYear was null or undefined when calling createToken."
            );
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const formData = new FormData();
        if (requestParameters.cardNumber !== undefined) {
            formData.append("card[number]", requestParameters.cardNumber as any);
        }

        if (requestParameters.cardExpMonth !== undefined) {
            formData.append("card[exp_month]", requestParameters.cardExpMonth as any);
        }

        if (requestParameters.cardExpYear !== undefined) {
            formData.append("card[exp_year]", requestParameters.cardExpYear as any);
        }

        if (requestParameters.cardCvc !== undefined) {
            formData.append("card[cvc]", requestParameters.cardCvc as any);
        }

        if (requestParameters.cardName !== undefined) {
            formData.append("card[name]", requestParameters.cardName as any);
        }

        const response = await this.request({
            path: `/tokens`,
            method: "POST",
            headers: headerParameters,
            query: queryParameters,
            body: formData
        });

        return new runtime.JSONApiResponse(response, jsonValue => TokenFromJSON(jsonValue));
    }

    /**
     * Create new token
     */
    async createToken(requestParameters: CreateTokenRequest): Promise<Token> {
        const response = await this.createTokenRaw(requestParameters);
        return await response.value();
    }

    /**
     * Info for a specific token
     */
    async getTokenByIdRaw(requestParameters: GetTokenByIdRequest): Promise<runtime.ApiResponse<Token>> {
        if (requestParameters.tokenId === null || requestParameters.tokenId === undefined) {
            throw new runtime.RequiredError(
                "tokenId",
                "Required parameter requestParameters.tokenId was null or undefined when calling getTokenById."
            );
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tokens/{token_id}`.replace(
                `{${"token_id"}}`,
                encodeURIComponent(String(requestParameters.tokenId))
            ),
            method: "GET",
            headers: headerParameters,
            query: queryParameters
        });

        return new runtime.JSONApiResponse(response, jsonValue => TokenFromJSON(jsonValue));
    }

    /**
     * Info for a specific token
     */
    async getTokenById(requestParameters: GetTokenByIdRequest): Promise<Token> {
        const response = await this.getTokenByIdRaw(requestParameters);
        return await response.value();
    }
}
